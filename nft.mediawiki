<pre>
  NEP: <to be assigned>
  Title: Non-Fungible Token Standard
  Author: Joe Stewart <hal0x2328@splyse.tech>, Shane Mann <fetter@splyse.tech>
  Type: Standard
  Status: Draft
  Created: 2018-04-18
</pre>

==Abstract==

This NEP defines a standard non-fungible token system for the NEO Smart Economy.

==Motivation==

NFTs are required to track, exchange and enforce ownership of digital assets. A non-fungible token (NFT) can be thought of like a property deed - each one is unique and carries some non-mutable information (e.g. the physical address of the property). Other information, such as the owner of the property, can be changed. Also, we provide a built-in optional divisibility within each non-fungible asset. This allows for high value objects to be tokenized more effectively.

==Specification==

===Methods===

====balanceOf====
<pre>
public static BigInteger balanceOf(byte[] owner)
</pre>
Returns current total tokens owned by <code>owner</code>.

====circulation====

<pre>
public static BigInteger circulation()
</pre>
Returns the total token supply deployed in the system.

====decimals====
<pre>
public static byte decimals()
</pre>
Returns the number of decimals of tokens in the system.

====mintToken====
<pre>
public static bool mintToken(byte[] owner, byte[] ROData, byte[] RWData, string URI)
</pre>
Creates a new non-fungible token. This fails and returns <code>False</code> if <code>owner</code> is not the contract owner.


====modifyRWData====
<pre>
public static bool modifyRWData(byte[] tokenid, byte[] RWData)
</pre>
Modifies a token's read/write data. This fails and returns <code>False</code> if <code>owner</code> is not the contract owner. Read-write data represents data that can be changed in the token, i.e., the owner of a property or work of art.

====modifyURI====
<pre>
public static bool modifyURI(byte[] tokenid, string URI)
</pre>
Modifies a token's URI. This fails and returns <code>False</code> if <code>owner</code> is not the contract owner. The URI data of a token supplies a reference to get more information about a specific token or its data.

====name====
<pre>
public static string name()
</pre>
Returns the name of the token.

====ownerOf====
<pre>
public static byte[] ownerOf(byte[] tokenid)
</pre>
Returns the owner of token with id <code>tokenid</code>.

====symbol====
<pre>
public static string symbol()
</pre>
Returns the token symbol.

====tokenOfOwnerByIndex====
<pre>
public static byte[] tokenOfOwnerByIndex(byte[] owner, int idx)
</pre>
Returns the token owned by <code>owner</code> at index <code>idx</code>.

====tokenROData====
<pre>
public static byte[] tokenROData(byte[] tokenid)
</pre>
Returns the read-only data for token with id <code>tokenid</code>. Read-only data represents immutable data contained in the token, i.e., a property address for a property or the artist's name for a work of art.

====tokenRWData====
<pre>
public static byte[] tokenRWData(byte[] tokenid)
</pre>
Returns the read-write data for token with id <code>tokenid</code>. Read-write data represents data that can be changed in the token, i.e., the owner of a property or work of art.

====tokenURI====
<pre>
public static string tokenURI(byte[] tokenid)
</pre>
Returns the URI of token with id <code>tokenid</code>. The URI data of a token supplies a reference to get more information about a specific token or its data.

====transfer====
<pre>
public static bool transfer(byte[] from, byte[] to, byte[] tokenid)
</pre>
Transfers token with id <code>tokenid</code> from address <code>from</code> to address <code>to</code>. If the <code>from</code> address does not equal the sender of the transaction this returns <code>False</code>, <code>True</code> otherwise.

====transferFrom====
<pre>
public static bool transferFrom(byte[] from, byte[] to, byte[] tokenid)
</pre>
Transfers a token with id <code>tokenid</code> from address <code>from</code> to address <code>to</code> if the from address has been approved by the <code>approve()</code> method. If the <code>from</code> address is not the owner of the token or if there is no approval this returns <code>False</code>, <code>True</code> otherwise.

====approve====

<pre>
public static bool approve(byte[] owner, byte[] spender, byte[] tokenid, bool revoke)
</pre>
Approves token <code>tokenid</code> owned by <code>owner</code> to be spent by <code>spender</code> using the <code>transferFrom()</code> method. If <code>revoke</code> is set to <code>1</code> the approval is revoked. A value of <code>True</code> is returned if the operation is approved. <code>False</code> is returned if the approval is denied because of incorrect permissions (owner is not in fact the owner, for example).

==Rationale==

==Implementation==
